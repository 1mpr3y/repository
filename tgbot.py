from dotenv import load_dotenv
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    Updater
)

# logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
# logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
load_dotenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_BOT_TOKEN = (os.getenv("TELEGRAM_BOT_TOKEN"))


# /start
async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    first_keyboard = [
    [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
     InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='subscribe')],
    [InlineKeyboardButton("üéÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='launch'),
     InlineKeyboardButton("üë• –û –Ω–∞—Å", callback_data='info')],
    [InlineKeyboardButton("üá∫üá∏ Language", callback_data='language'),
     InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
    [InlineKeyboardButton("‚úâÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data='referral')]
]
    reply_markup = InlineKeyboardMarkup(first_keyboard)
    await update.message.reply_text("<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>", reply_markup=reply_markup, parse_mode="html")

# –ù–∞–∑–∞–¥
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    first_keyboard = [
    [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
     InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='subscribe')],
    [InlineKeyboardButton("üéÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='launch'),
     InlineKeyboardButton("üë• –û –Ω–∞—Å", callback_data='info')],
    [InlineKeyboardButton("üá∫üá∏ Language", callback_data='language'),
     InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
    [InlineKeyboardButton("‚úâÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data='referral')]
]
    reply_markup = InlineKeyboardMarkup(first_keyboard)
    await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=reply_markup)
# –ü—Ä–æ—Ñ–∏–ª—å
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id) # –ó–∞–ø—Ä–æ—Å –∞–π–¥–∏
    user_fullname = (update.effective_user.full_name) # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    user_name = (update.effective_user.name) # –ó–∞–ø—Ä–æ—Å —é–∑–µ—Ä–Ω–µ–π–º–∞
    query = update.callback_query
    second_keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    reply_markup = InlineKeyboardMarkup(second_keyboard)
    await query.edit_message_text(f"‚ÑπÔ∏è <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n‚Ä¢ ID: <b>{user_id}</b>\n‚Ä¢ –ò–º—è: <b>{user_fullname}</b>\n‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: <b>{user_name}</b>\n\n<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n‚Ä¢ –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: <b>0</b>\n‚Ä¢ –ü–æ–π–º–∞–Ω–æ NFT: <b>0</b>\n‚Ä¢ –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç: <b>–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>", reply_markup=reply_markup, parse_mode="html")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == "profile":
        await show_profile(update, context)
    elif data == "subscribe":
        await query.answer()
        await query.edit_message_text(text="–í—ã –Ω–∞–∂–∞–ª–∏ –ù–æ–≤—É—é –∫–Ω–æ–ø–∫—É 1")
    elif data == "back":
        await show_menu(update, context)
    else:
        await query.answer()
        await query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞")

# –≠—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    await update.message.reply_text(user_message)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_menu))   # –∫–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CallbackQueryHandler(handle_buttons))       # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), echo))  # –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()